title: Road to v1.0.0
---
_slug: road-to-v1-0-0
---
pub_date: 2016-05-23
---
author: Mihael Konjević
---
gravatar: 9976060bfb26220dd042340394d06b31
---
body: 

Today I’m releasing the new Keechma site and I wanted to use this opportunity to share my plans for v1.0.0.

Keechma is now slightly older than three months, and in this time I talked a lot with the people who were trying it out, did a lot of experimentation and  built a number of smaller apps with Keechma. This gave me some ideas on things that need to be improved before a solid v1 release.

One of the first things I did with Keechma was extracting [EntityDB](http://github.com/keechma/entitydb) and [Router](http://github.com/keechma/router) from the main project. Although this allows usage of these libraries in the non-Keechma projects, it created some logistic problems. The biggest problem was that the build system (and design) were created with a single repo in mind. That’s why **the new site was the first and most important step to v1.0.0.**

New site is built with bunch of tools ([Marginalia](http://gdeer81.github.io/marginalia/), [Codox](https://github.com/weavejester/codox), Make, NodeJS), but the final build is performed by the [Lektor CMS](https://www.getlektor.com/) which allows me to build the site both from the content generated by the documentation tools, and to add custom content (like this news) in one system. **Expect more articles, news and content around Keechma in the future.**

## Future of Keechma

### Convenience layer

When designing and building the first version, I was very careful to avoid adding stuff to Keechma just for the sake of convenience. I believe that adding a convenience layer too early makes it easy to design a bloated system. It resulted with clean, tight core, but it also resulted with an API that is more verbose than necessary.

In the future, I want to add a convenience layer on top of Keechma that will remove a lot of boilerplate code from the typical app. **This convenience layer will be completely optional and contained in a separate package.** I want to keep the amount of code in the main Keechma project minimal. I will share more news about this project when I start working on it, but please let me know if you have any ideas or [feedback](mailto:konjevic@gmail.com).

### Documentation

Another area I want to focus on is documentation. Keechma is a new project and the community around it is starting to form. I believe that the best thing I can do to kickstart the growth of the community and Keechma adoption is to create more documentation, more tutorials, more content around Keechma. Right now, **writing documentation will have bigger impact than writing code**, and that's something I'm ready to embrace.

To be able to write great docs and tutorials, **I need your help.** I have some ideas about the improvements that can be made, but more feedback is always welcome.

#### How You can help me:

- **Try Keechma** - you will have questions, and by answering these questions I'll be able to see which parts need better docs
- **Ask questions** - you can find me on [Clojurians Slack](https://clojurians.slack.com/) (in #keechma channel), on [Twitter](http://twitter.com/mihaelkonjevic) or you can send me an [email](mailto:konjevic@gmail.com).
- **Show me examples of interfaces that were hard to architect** - If you have an example of the interface that is hard to architect, send it to me and I'll try to replicate it with Keechma and write a blog post about it. It doesn't matter if it's implemented in a different framework, or if you found it somewhere in the wild.

I want to make Keechma really easy to use, and it all starts with good documentation. Your feedback and questions will allow me to write it.

## Tangential projects

Keechma solves a small subset of problems we encounter while building apps. There is a lot of stuff that could be solved in a nicer way, and I'll work on it as need arises.

The first project that will be released in the near future (after I write the documentation) is [Keechma Forms](https://github.com/keechma/forms). It will allow you to model and validate complex forms with ease. Until the documentation is written you can [check out the tests](https://github.com/keechma/forms/tree/master/test/forms/test) to see how the API will look.

Like EntityDB and Router, the Forms library is in no way coupled with Keechma. It can be used with any Reagent project but also with any ClojureScript project (with a little effort).

## Conclusion

I believe that Keechma has sound fundamentals, and in the future, I want to make it the easiest to use and the best-documented framework out there (at least in the ClojureScript world). To do that, I'll need your help, so please let me know if you have any feedback. You can ping on [Twitter](http://twitter.com/mihaelkonjevic) or you can send me an [email](mailto:konjevic@gmail.com).

---
twitter_handle: mihaelkonjevic
