_model: guide
---
order: 4
---
title: EntityDB
---
body:


<p>The big idea behind EntityDB is consistency. Since it ensures that there is only one instance of each entity in your application, consistency is inherent. This enables you to write simpler code and avoid a whole class of bugs related to data synchronization. Gone too is the requirement to model your application state in a quickly-unmanageable tree. EntityDB provides:</p>
<ol>
<li><strong>Data Consistency</strong> &#x2014; collections of entities are kept up-to-date: remove an entity from EntityDB and it is removed from any collections that contain it</li>
<li><strong>Rendering Consistency</strong> &#x2014; any change to an entity is reflected everywhere it is rendered (e.g. a master-detail layout)</li>
<li><strong>Simplicity</strong> &#x2014; all entities are in a central location</li>
</ol>
<h2>How does it work?</h2>
<p>Implemented as a separate library, EntityDB tracks all of your application&apos;s entities. An entity is anything that is &quot;identifiable&quot;. While the <code>:id</code> attribute is normally used for this purpose, your application can identify entities in whatever way makes sense.</p>
<p>Operating on a Clojure <code>map</code>, access to EntityDB is purely functional and supports two types of structures:</p>
<ol>
<li><strong>Collections</strong> &#x2014; lists of entities stored and retrieved by the collection&apos;s name</li>
<li><strong>Named entity slots</strong> &#x2014; individual named entities</li>
</ol>
<p>Since ClojureScript data structures are immutable, holding a reference to a list of entities (or an entity) will always give you the same value. By using names, EntityDB can internally update named entities and collections when the data changes and ensure data consistency.</p>
<hr>
<p>Before you can store the entities you need to define the schema. Each entity type needs it&apos;s own schema:</p>
<pre><code class="language-clojure hljs">(<span class="hljs-name"><span class="hljs-builtin-name">def</span></span> schema {<span class="hljs-symbol">:users</span> {<span class="hljs-symbol">:id</span> <span class="hljs-symbol">:id</span>}
             <span class="hljs-symbol">:news</span> {<span class="hljs-symbol">:id</span> <span class="hljs-symbol">:slug</span>}})
</code></pre>
<p>With the schema defined, you can store entities:</p>
<pre><code class="language-clojure hljs">(<span class="hljs-name"><span class="hljs-builtin-name">def</span></span> store-v1 {})

(<span class="hljs-name"><span class="hljs-builtin-name">def</span></span> user {<span class="hljs-symbol">:id</span> <span class="hljs-number">1</span> <span class="hljs-symbol">:username</span> <span class="hljs-string">&quot;retro&quot;</span>})

(<span class="hljs-name"><span class="hljs-builtin-name">def</span></span> store-v2 (<span class="hljs-name">insert-named-item</span> schema store-v1 <span class="hljs-symbol">:users</span> <span class="hljs-symbol">:current</span> user))
<span class="hljs-comment">;; store the user under the name `:current`</span>

(<span class="hljs-name">get-named-item</span> schema store-v2 <span class="hljs-symbol">:users</span> <span class="hljs-symbol">:current</span>)
<span class="hljs-comment">;; Returns {:id 1 :username &quot;retro&quot;}</span>

(<span class="hljs-name"><span class="hljs-builtin-name">def</span></span> user-collection [{<span class="hljs-symbol">:id</span> <span class="hljs-number">1</span> <span class="hljs-symbol">:username</span> <span class="hljs-string">&quot;retro&quot;</span> <span class="hljs-symbol">:likes</span> <span class="hljs-string">&quot;programming&quot;</span>}
                      {<span class="hljs-symbol">:id</span> <span class="hljs-number">2</span> <span class="hljs-symbol">:username</span> <span class="hljs-string">&quot;neektza&quot;</span> <span class="hljs-symbol">:likes</span> <span class="hljs-string">&quot;wrestling&quot;</span>}])

(<span class="hljs-name"><span class="hljs-builtin-name">def</span></span> store-v3
  (<span class="hljs-name">insert-collection</span> schema store-v2 <span class="hljs-symbol">:users</span> <span class="hljs-symbol">:list</span> user-collection))
<span class="hljs-comment">;; Store the user collection. User with the `:id` 1 will be updated</span>

(<span class="hljs-name">get-named-item</span> schema store-v3 <span class="hljs-symbol">:users</span> <span class="hljs-symbol">:current</span>)
<span class="hljs-comment">;; Returns {:id 1 :username &quot;retro&quot; :likes &quot;programming&quot;}</span>
</code></pre>
<p>Data is kept consistent &#x2014; no manual synchronisation required.</p>
<h2>Relations</h2>
<h3>One-to-One relations</h3>
<p>EntityDB can handle simple relations between entities. Relations are defined in the schema:</p>
<pre><code class="language-clojure hljs">(<span class="hljs-name"><span class="hljs-builtin-name">def</span></span> schema {<span class="hljs-symbol">:users</span> {<span class="hljs-symbol">:id</span> <span class="hljs-symbol">:id</span>}
             <span class="hljs-symbol">:news</span> {<span class="hljs-symbol">:relations</span> {<span class="hljs-symbol">:author</span> [<span class="hljs-symbol">:one</span> <span class="hljs-symbol">:users</span>]}}})
</code></pre>
<p>EntityDB will now expect a nested <code>author</code> object for each news entity. That object will be unpacked and stored in the <code>users</code> store.</p>
<p>When you insert an entity into the EntityDB multiple times, it&apos;s data will be merged with the previous version&apos;s data. This allows you to write code that looks like this:</p>
<pre><code class="language-clojure hljs">(<span class="hljs-name"><span class="hljs-builtin-name">def</span></span> schema {<span class="hljs-symbol">:users</span> {<span class="hljs-symbol">:id</span> <span class="hljs-symbol">:id</span>}
             <span class="hljs-symbol">:news</span> {<span class="hljs-symbol">:relations</span> {<span class="hljs-symbol">:author</span> [<span class="hljs-symbol">:one</span> <span class="hljs-symbol">:users</span>]}}})

(<span class="hljs-name"><span class="hljs-builtin-name">def</span></span> store-v1 {})

(<span class="hljs-name"><span class="hljs-builtin-name">def</span></span> users [{<span class="hljs-symbol">:id</span> <span class="hljs-number">1</span> <span class="hljs-symbol">:username</span> <span class="hljs-string">&quot;retro&quot;</span>}
            {<span class="hljs-symbol">:id</span> <span class="hljs-number">2</span> <span class="hljs-symbol">:username</span> <span class="hljs-string">&quot;mihaelkonjevic&quot;</span>}])

(<span class="hljs-name"><span class="hljs-builtin-name">def</span></span> news [{<span class="hljs-symbol">:id</span> <span class="hljs-number">1</span> <span class="hljs-symbol">:title</span> <span class="hljs-string">&quot;First News&quot;</span> <span class="hljs-symbol">:author</span> {<span class="hljs-symbol">:id</span> <span class="hljs-number">1</span>}}
           {<span class="hljs-symbol">:id</span> <span class="hljs-number">2</span> <span class="hljs-symbol">:title</span> <span class="hljs-string">&quot;Second News&quot;</span> <span class="hljs-symbol">:author</span> {<span class="hljs-symbol">:id</span> <span class="hljs-number">2</span>}}])

(<span class="hljs-name"><span class="hljs-builtin-name">def</span></span> store-v2 (<span class="hljs-name">insert-collection</span> schema store-v1 <span class="hljs-symbol">:news</span> <span class="hljs-symbol">:list</span> news))
<span class="hljs-comment">;; Insert news into the store</span>

(<span class="hljs-name">get-item-by-id</span> schema store-v2 <span class="hljs-symbol">:users</span> <span class="hljs-number">1</span>)
<span class="hljs-comment">;; Returns {:id 1}</span>

(<span class="hljs-name"><span class="hljs-builtin-name">def</span></span> store-v3 (<span class="hljs-name">insert-collection</span> schema store-v2 <span class="hljs-symbol">:users</span> <span class="hljs-symbol">:list</span> users))
<span class="hljs-comment">;; Insert users into the store</span>

(<span class="hljs-name"><span class="hljs-builtin-name">def</span></span> news-1 (<span class="hljs-name">get-item-by-id</span> schema store-v3 <span class="hljs-symbol">:news</span> <span class="hljs-number">1</span>))
<span class="hljs-comment">;; Returns {:id 1 :title &quot;First News&quot; :author (fn [])}</span>

((<span class="hljs-symbol">:author</span> news-1))
<span class="hljs-comment">;; Returns {:id 1 :username &quot;retro&quot;}</span>
</code></pre>
<p>When you access a nested relation stored in EntityDB, it will be wrapped inside a function. This ensures that circular relations can be resolved.</p>
<h3>One-to-Many relations</h3>
<p>EntityDB supports one-to-many relations too:</p>
<pre><code class="language-clojure hljs">(<span class="hljs-name"><span class="hljs-builtin-name">def</span></span> schema {<span class="hljs-symbol">:users</span> {<span class="hljs-symbol">:id</span> <span class="hljs-symbol">:id</span>
                     <span class="hljs-symbol">:relations</span> {<span class="hljs-symbol">:news</span> [<span class="hljs-symbol">:many</span> <span class="hljs-symbol">:news</span>]}}
             <span class="hljs-symbol">:news</span> {<span class="hljs-symbol">:id</span> <span class="hljs-symbol">:id</span>
                    <span class="hljs-symbol">:relations</span> {<span class="hljs-symbol">:author</span> [<span class="hljs-symbol">:one</span> <span class="hljs-symbol">:users</span>]}}})

(<span class="hljs-name"><span class="hljs-builtin-name">def</span></span> store-v1 {})

(<span class="hljs-name"><span class="hljs-builtin-name">def</span></span> user {<span class="hljs-symbol">:id</span> <span class="hljs-number">1</span> <span class="hljs-symbol">:username</span> <span class="hljs-string">&quot;retro&quot;</span> <span class="hljs-symbol">:news</span> [{<span class="hljs-symbol">:id</span> <span class="hljs-number">1</span>} {<span class="hljs-symbol">:id</span> <span class="hljs-number">2</span>}]})

(<span class="hljs-name"><span class="hljs-builtin-name">def</span></span> news [{<span class="hljs-symbol">:id</span> <span class="hljs-number">1</span> <span class="hljs-symbol">:title</span> <span class="hljs-string">&quot;First News&quot;</span> <span class="hljs-symbol">:author</span> {<span class="hljs-symbol">:id</span> <span class="hljs-number">1</span>}}])

(<span class="hljs-name"><span class="hljs-builtin-name">def</span></span> store-v2 (<span class="hljs-name">insert-named-item</span> schema store-v1 <span class="hljs-symbol">:users</span> <span class="hljs-symbol">:current</span> user))
<span class="hljs-comment">;; Inserts user into the store</span>

(<span class="hljs-name">get-item-by-id</span> schema store-v2 <span class="hljs-symbol">:news</span> <span class="hljs-number">1</span>)
<span class="hljs-comment">;; Returns {:id 1}</span>

(<span class="hljs-name"><span class="hljs-builtin-name">def</span></span> store-v3 (<span class="hljs-name">insert-collection</span> schema store-v2 <span class="hljs-symbol">:news</span> <span class="hljs-symbol">:list</span> news))
<span class="hljs-comment">;; Inserts news into the store</span>

(<span class="hljs-name"><span class="hljs-builtin-name">def</span></span> user-1 (<span class="hljs-name">get-item-by-id</span> schema store-v3 <span class="hljs-symbol">:users</span> <span class="hljs-number">1</span>))
<span class="hljs-comment">;; Returns {:id 1 :username &quot;retro&quot; :news (fn[])}</span>

((<span class="hljs-symbol">:news</span> user-1))
<span class="hljs-comment">;; Returns [{:id 1 :title &quot;First News&quot; :author (fn[])}]</span>
</code></pre>
<hr>
<p>Relations support in EntityDB provides you with a flexible way to keep your data consistent.</p>
<p>Here are the EntityDB <a href="/api/entitydb/">API docs</a>.</p>
